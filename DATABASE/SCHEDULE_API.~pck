create or replace package SCHEDULE_API is

PROCEDURE New_(attr_ IN OUT VARCHAR2, rslt_ IN OUT VARCHAR2);

PROCEDURE Unpack_(attr_ IN VARCHAR2,
                  rec_  IN OUT SCHEDULE_TAB%ROWTYPE,
                  rslt_ IN OUT VARCHAR2);

PROCEDURE Insert_(attr_   OUT VARCHAR2,
                  newrec_ IN OUT NOCOPY SCHEDULE_TAB%ROWTYPE,
                  rslt_   IN OUT VARCHAR2);

PROCEDURE Pack_(rec_ IN SCHEDULE_TAB%ROWTYPE, attr_ IN OUT VARCHAR2);

PROCEDURE Modify_(attr_ IN OUT VARCHAR2, rslt_ IN OUT VARCHAR2);

PROCEDURE Check_Update_(newrec_ IN OUT SCHEDULE_TAB%ROWTYPE,
                        rslt_   IN OUT VARCHAR2);

PROCEDURE Get_(schId_   IN VARCHAR2,
               old_rec_ IN OUT SCHEDULE_TAB%ROWTYPE,
               rslt_    IN OUT VARCHAR2);

PROCEDURE Delete_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2);

PROCEDURE Update_(attr_   OUT VARCHAR2,
                  newrec_ IN OUT NOCOPY SCHEDULE_TAB%ROWTYPE,
                  rslt_   IN OUT VARCHAR2);

PROCEDURE Check_Insert_(newrec_ IN OUT SCHEDULE_TAB%ROWTYPE,
                        rslt_   IN OUT VARCHAR2);

PROCEDURE Check_Exist_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2);

PROCEDURE Get_Schedule(description_    OUT VARCHAR2,
                       schStartDate_   OUT NUMBER,
                       workTimePerSch_ OUT NUMBER,
                       createdDate_    OUT DATE,
                       modifiedDate_   OUT DATE,
                       rowversion_     OUT DATE,
                       rslt_           OUT VARCHAR2,
                       schId_          IN VARCHAR2);

FUNCTION Calc_Work_Time_Per_Sch(schId_ IN VARCHAR2) RETURN NUMBER;

PROCEDURE Check_Delete_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2);


end SCHEDULE_API;
/
create or replace package body SCHEDULE_API is

 PROCEDURE New_(attr_ IN OUT VARCHAR2, rslt_ IN OUT VARCHAR2) IS
   rec_ SCHEDULE_TAB%ROWTYPE;
 BEGIN
   Unpack_(attr_, rec_, rslt_);
   IF rslt_ = 'TRUE' THEN
     Check_Insert_(rec_, rslt_);
     IF rslt_ = 'TRUE' THEN
       Insert_(attr_, rec_, rslt_);
       IF rslt_ = 'TRUE' THEN
         rslt_ := 'Successfully saved the schedule.';
       END IF;
     END IF;
   END IF;
 EXCEPTION
   WHEN OTHERS THEN
     rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
 END New_;
 
 PROCEDURE Unpack_(attr_ IN VARCHAR2,
                   rec_  IN OUT SCHEDULE_TAB%ROWTYPE,
                   rslt_ IN OUT VARCHAR2) IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(1000);
 BEGIN
   WHILE (System_API.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
     rslt_ := name_;
     IF name_ = 'SCHEDULE_ID' THEN
       rec_.schedule_id := value_;
     ELSIF name_ = 'DESCRIPTION' THEN
       rec_.description := value_;
     ELSIF name_ = 'SCH_START_DATE' THEN
       rec_.sch_start_date := TO_NUMBER(value_);
     ELSIF name_ = 'WORK_TIME_PER_SCH' THEN
       rec_.work_time_per_sch := TO_NUMBER(value_);
     ELSIF name_ = 'CREATED_DATE' THEN
       rec_.created_date := TO_DATE(value_, 'dd-MM-yyyy');
     ELSIF name_ = 'MODIFIED_DATE' THEN
       rec_.modified_date := TO_DATE(value_, 'dd-MM-yyyy');
     ELSIF name_ = 'ROWVERSION' THEN
       rec_.rowversion := TO_DATE(value_, 'MM/DD/YYYY HH:MI:SS AM');
     ELSE
       rslt_ := 'Attr error: Unknown attribute found: ' || name_ || ' - ' ||
                value_;
     END IF;
   END LOOP;
   rslt_ := 'TRUE';
 EXCEPTION
   WHEN OTHERS THEN
     rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
 END Unpack_;

  PROCEDURE Check_Insert_(newrec_ IN OUT SCHEDULE_TAB%ROWTYPE,
                          rslt_   IN OUT VARCHAR2) IS
  BEGIN
    Check_Exist_(newrec_.schedule_id, rslt_);
    IF rslt_ = 'TRUE' THEN
      rslt_ := 'Error: Schedule ' || newrec_.schedule_id ||
               ' already exists.';
    ELSE
      rslt_ := 'TRUE';
    END IF;
    IF newrec_.schedule_id IS NULL THEN
      rslt_ := 'Error: Schedule ID cannot be Empty.';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Check_Insert_;

  PROCEDURE Check_Exist_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2) IS
    tmp_ NUMBER;
    CURSOR chk_sch IS
      SELECT 1 FROM SCHEDULE_TAB i WHERE i.schedule_id = schId_;
  BEGIN
    OPEN chk_sch;
    FETCH chk_sch
      INTO tmp_;
    IF chk_sch%FOUND THEN
      CLOSE chk_sch;
      rslt_ := 'TRUE';
    ELSE
      CLOSE chk_sch;
      rslt_ := 'FALSE';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Check_Exist_;

  PROCEDURE Insert_(attr_   OUT VARCHAR2,
                    newrec_ IN OUT NOCOPY SCHEDULE_TAB%ROWTYPE,
                    rslt_   IN OUT VARCHAR2) IS
  BEGIN
    INSERT INTO SCHEDULE_TAB
      (SCHEDULE_ID, DESCRIPTION, SCH_START_DATE)
    VALUES
      (newrec_.schedule_id, newrec_.description, newrec_.sch_start_date)
    RETURNING CREATED_DATE, MODIFIED_DATE, ROWVERSION INTO newrec_.created_date, newrec_.modified_date, newrec_.rowversion;
    COMMIT;
  
    rslt_ := 'TRUE';
    attr_ := '';
    Pack_(newrec_, attr_);
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Insert_;

  PROCEDURE Pack_(rec_ IN SCHEDULE_TAB%ROWTYPE, attr_ IN OUT VARCHAR2) IS
  BEGIN
    System_API.Add_To_Attr('SCHEDULE_ID', rec_.schedule_id, attr_);
    System_API.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
    System_API.Add_To_Attr('SCH_START_DATE',
                           Day_No_Enum.Get_Day_Name(rec_.sch_start_date),
                           attr_);
    System_API.Add_To_Attr('WORK_TIME_PER_SCH',
                           to_char(rec_.work_time_per_sch),
                           attr_);
    System_API.Add_To_Attr('CREATED_DATE',
                           to_char(rec_.created_date, 'dd-MM-yyyy'),
                           attr_);
    System_API.Add_To_Attr('MODIFIED_DATE',
                           to_char(rec_.modified_date, 'dd-MM-yyyy'),
                           attr_);
    System_API.Add_To_Attr('ROWVERSION',
                           to_char(rec_.rowversion,
                                   'MM/DD/YYYY HH:MI:SS AM'),
                           attr_);
  
  END Pack_;

  PROCEDURE Modify_(attr_ IN OUT VARCHAR2, rslt_ IN OUT VARCHAR2) IS
    rec_ SCHEDULE_TAB%ROWTYPE;
  BEGIN
    Unpack_(attr_, rec_, rslt_);
    IF rslt_ = 'TRUE' THEN
      Check_Update_(rec_, rslt_);
      IF rslt_ = 'TRUE' THEN
        Update_(attr_, rec_, rslt_);
        IF rslt_ = 'TRUE' THEN
          rslt_ := 'Successfully Updated the schedule.';
        END IF;
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Modify_;

  PROCEDURE Check_Update_(newrec_ IN OUT SCHEDULE_TAB%ROWTYPE,
                          rslt_   IN OUT VARCHAR2) IS
    oldrec_ SCHEDULE_TAB%ROWTYPE;
  BEGIN
    Get_(newrec_.schedule_id, oldrec_, rslt_);
    IF rslt_ = 'TRUE' THEN
      IF newrec_.rowversion != oldrec_.rowversion THEN
        rslt_ := 'Error: Record has been updated by another user. Please refresh the window and try again.';
      END IF;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Check_Update_;

  PROCEDURE Get_(schId_   IN VARCHAR2,
                 old_rec_ IN OUT SCHEDULE_TAB%ROWTYPE,
                 rslt_    IN OUT VARCHAR2) IS
    check_flag VARCHAR2(10);
    CURSOR get_sch IS
      SELECT * FROM SCHEDULE_TAB i WHERE i.schedule_id = schId_;
  BEGIN
    Check_Exist_(schId_, check_flag);
    IF check_flag = 'TRUE' THEN
      OPEN get_sch;
      FETCH get_sch
        INTO old_rec_;
      CLOSE get_sch;
      rslt_ := 'TRUE';
    ELSE
      rslt_ := 'Error: Cannot find the schedule ' || schId_ || '.';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Get_;

  PROCEDURE Update_(attr_   OUT VARCHAR2,
                    newrec_ IN OUT NOCOPY SCHEDULE_TAB%ROWTYPE,
                    rslt_   IN OUT VARCHAR2) IS
  BEGIN
    newrec_.rowversion := sysdate;
    UPDATE SCHEDULE_TAB i
       SET ROW = newrec_
     WHERE i.schedule_id = newrec_.schedule_id;
    COMMIT;
    
    rslt_ := 'TRUE';
    attr_ := '';
    Pack_(newrec_, attr_);
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Update_;

  PROCEDURE Delete_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2) IS
      
  BEGIN
    Check_Delete_(schId_, rslt_);
    IF rslt_ = 'TRUE' THEN
      
      DELETE FROM SCH_PER_CALENDAR_TAB
       WHERE spc_line_no = spc_line_no_;
      rslt_ := 'Successfully deleted the schedule line.';
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Delete_;

  PROCEDURE Get_Schedule(description_    OUT VARCHAR2,
                         schStartDate_   OUT NUMBER,
                         workTimePerSch_ OUT NUMBER,
                         createdDate_    OUT DATE,
                         modifiedDate_   OUT DATE,
                         rowversion_     OUT DATE,
                         rslt_           OUT VARCHAR2,
                         schId_          IN VARCHAR2) IS
  
    dummy number := 0;
  
  BEGIN
    IF (schId_ IS NULL) THEN
      RETURN;
    END IF;
    SELECT 1 into dummy from SCHEDULE_TAB i where i.schedule_id = schId_;
  
    if dummy = 0 then
      raise no_data_found;
      return;
    end if;
  
    SELECT i.description,
           i.sch_start_date,
           i.work_time_per_sch,
           i.Created_Date,
           i.Modified_Date,
           i.Rowversion
      INTO description_,
           schStartDate_,
           workTimePerSch_,
           createdDate_,
           modifiedDate_,
           rowversion_
      FROM SCHEDULE_TAB i
     WHERE i.schedule_id = schId_;
    rslt_ := 'TRUE';
  EXCEPTION
    WHEN no_data_found THEN
      rslt_ := 'No data found';
    WHEN others THEN
      rslt_ := 'Error: ' || SQLCODE || ' - ' || SQLERRM;
  END Get_Schedule;
  
  FUNCTION Calc_Work_Time_Per_Sch(schId_ IN VARCHAR2) RETURN NUMBER IS
    work_time_per_sch_ NUMBER := 0;
    CURSOR get_day_lines IS
      SELECT *
        FROM Day_Type_Tab
       WHERE day_type_id IN (SELECT day_type_id
                               FROM day_types_sch_tab
                              WHERE SCHEDULE_ID = schId_);
  
  BEGIN
    FOR day_rec_ IN get_day_lines LOOP
      work_time_per_sch_ := work_time_per_sch_ + day_rec_.work_time_per_day;
    END LOOP;
    RETURN work_time_per_sch_;
  END Calc_Work_Time_Per_Sch;
  
  PROCEDURE Check_Delete_(schId_ IN VARCHAR2, rslt_ IN OUT VARCHAR2) IS
    
    rec_ SCHEDULE_TAB%ROWTYPE;
       
    CURSOR get_used_cal IS
    SELECT CALENDAR_ID
      FROM SCH_PER_CALENDAR_TAB 
     WHERE SCHEDULE_ID = schId_;
         
  BEGIN
    
    Get_(schId_, rec_, rslt_);
    IF (rslt_ = 'TRUE') THEN
      FOR cal_rec_ IN get_used_cal LOOP
        IF (work_time_calendar_api.Get_Cal_Status(cal_rec_.calendar_id) NOT IN (0)) THEN
          rslt_ := 'Error: Schedule ' || schId_ || ' is used in one or more calendars not in Planned status.';
          EXIT;
        END IF;  
      END LOOP;  
    END IF;
    
  END Check_Delete_;
 
end SCHEDULE_API;
/
